{"version":3,"sources":["Button.js","Counter.js","CountPanel.js","Input.js","SettingsPanel.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","onClick","disabled","className","title","Counter","countMax","count","CountPanel","onInkrement","countDisabled","onReset","onSetVisible","Input","inputError","onChange","changeValue","type","value","SettingsPanel","maxValue","onMaxChangeValue","minValue","onMinChangeValue","setButtonDisabled","onCountVisible","App","state","startCount","countVisible","setVisible","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","newState","getItem","parse","setState","e","maxChange","target","Number","minChange","this","ink","reset","set","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a7119f0.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Button(props) {\n\n    return (\n        <button onClick={props.onClick}\n                disabled={props.disabled}\n                className={'button'}>{props.title}</button>\n    )\n}\n\nexport default Button;\n","import React from 'react';\nimport './App.css';\nimport Button from \"./Button\";\n\nfunction Counter(props) {\n\n    return (\n        <div className={props.countMax}>{props.count}</div>\n    )\n\n}\n\nexport default Counter;\n","import React from 'react';\nimport './App.css';\nimport Button from \"./Button\";\nimport Counter from \"./Counter\";\n\nfunction CountPanel(props) {\n\n    return (\n\n        <>\n            <div className='count'>\n                <Counter countMax={props.countMax}\n                         count={props.count}/>\n            </div>\n            <div className='buttonBorder'>\n                <Button onClick={props.onInkrement}\n                        disabled={props.countDisabled}\n                        title={'ink'}/>\n                <Button onClick={props.onReset}\n                        title={'reset'}/>\n                <Button onClick={props.onSetVisible}\n                        title={'set'}/>\n            </div>\n        </>\n\n\n    )\n\n}\n\nexport default CountPanel;\n","import React from 'react';\nimport './App.css';\nimport Button from \"./Button\";\n\nfunction Input(props) {\n\n    return (\n        <>\n                <span>{props.title}</span>\n                <input className={props.inputError}\n                       onChange={props.changeValue}\n                       type=\"number\"\n                       value={props.value}/>\n        </>\n    )\n}\n\nexport default Input;\n","import React from 'react';\nimport './App.css';\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\nfunction SettingsPanel(props) {\n\n    return (\n        <>\n            <div className='count'>\n                <div>\n                    <Input\n                        value={props.maxValue}\n                        inputError={props.inputError}\n                        changeValue={props.onMaxChangeValue}\n                        title={'maxValue'}\n                    />\n                </div>\n                <div>\n                    <Input\n                        value={props.minValue}\n                        inputError={props.inputError}\n                        changeValue={props.onMinChangeValue}\n                        title={'minValue'}\n                    />\n                </div>\n            </div>\n            <div className='buttonBorder'>\n                <Button disabled={props.setButtonDisabled}\n                        onClick={props.onCountVisible}\n                        title={'set'}/>\n            </div>\n        </>\n\n\n    )\n\n}\n\nexport default SettingsPanel;\n","import React from 'react';\nimport './App.css';\nimport CountPanel from './CountPanel'\nimport SettingsPanel from \"./SettingsPanel\";\n\nclass App extends React.Component {\n\n    state = {\n        startCount: 0,\n        count: 0,\n        countVisible: true,\n        setVisible: false,\n        maxValue: 5,\n        minValue: 0\n    }\n\n    componentDidMount() {\n        this.restoreState()\n    }\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state)\n        localStorage.setItem('state', stateAsString)\n    }\n    restoreState = () => {\n        let state = {\n            startCount: 0,\n            count: 0,\n            countVisible: true,\n            setVisible: false,\n            maxValue: 5,\n            minValue: 0\n        }\n        let newState = localStorage.getItem('state')\n        if (newState != null) {\n            state = JSON.parse(newState)\n        }\n        this.setState(state)\n    }\n\n\n    onInkrement = () => {\n        this.setState({\n            count: this.state.count + 1\n        }, () => {\n            this.saveState()\n        })\n    }\n\n    onReset = () => {\n        this.setState({\n            count: this.state.startCount\n        }, () => {\n            this.saveState()\n        })\n    }\n    onSetVisible = () => {\n        this.setState({\n            countVisible: false,\n            setVisible: true\n        }, () => {\n            this.saveState()\n        })\n    }\n    onCountVisible = () => {\n        this.setState({\n            count: this.state.minValue,\n            countVisible: true,\n            setVisible: false,\n            startCount: this.state.minValue,\n\n\n        }, () => {\n            this.saveState()\n        })\n    }\n    onMaxChangeValue = (e) => {\n        let maxChange = e.target.value\n        this.setState({\n            maxValue: Number(maxChange)\n        }, () => {\n            this.saveState()\n        })\n    }\n    onMinChangeValue = (e) => {\n        let minChange = e.target.value\n        this.setState({\n            minValue: Number(minChange)\n        }, () => {\n            this.saveState()\n        })\n    }\n\n\n    render() {\n\n        let countDisabled = this.state.count === this.state.maxValue\n\n        let setButtonDisabled = this.state.maxValue <= this.state.minValue || this.state.minValue < 0\n\n        let inputError = this.state.maxValue <= this.state.minValue || this.state.minValue < 0 ? 'inputError' : 'input'\n\n        let countMax = this.state.count === this.state.maxValue ? 'redCount counter' : 'counter'\n\n        return (\n            <div className=\"App\">\n                <div className='container'>\n                    {this.state.countVisible && <>\n                        <CountPanel onReset={this.onReset}\n                                    onInkrement={this.onInkrement}\n                                    onSetVisible={this.onSetVisible}\n                                    count={this.state.count}\n                                    countMax={countMax}\n                                    countDisabled={countDisabled}\n                                    ink={'ink'}\n                                    reset={'reset'}\n                                    set={'set'}\n                        />\n                    </>}\n                    {this.state.setVisible && <>\n                        <SettingsPanel inputError={inputError}\n                                       onMaxChangeValue={this.onMaxChangeValue}\n                                       maxValue={this.state.maxValue}\n                                       onMinChangeValue={this.onMinChangeValue}\n                                       minValue={this.state.minValue}\n                                       setButtonDisabled={setButtonDisabled}\n                                       onCountVisible={this.onCountVisible}\n                        />\n                    </>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}